setwd("C:/Users/pd281/Downloads/fff22")
install.packages("ggplot2")
Hello World
print("Hello World")
pi() / 2
pi / 2
print("Hello World!")
5 * 9
2 + 4,8
2 + 4.8
print("Hello World!")
print("Hello World!")
5 * 9
2 + 4.8
3^2
pi / 2
save.image("C:/Users/pd281/Downloads/fff22/workspace.RData")
a <- seq(6)
a[2]
a[1, 3, 6]
a[c(1, 3, 6)]
v <- c(1:5)
u <- c(6:10)
v + u
u - v
v + u
v <- c(1:5)
u <- c(6:9)
v + u
u - v
v + u
x <- c("blue", 10, "green", 20)
is.character(x)
v * u
u <- c(6:10)
v * u
u <- c(6:10)
u <- c(6:9)
rep(2, 6)
seq(-2, 4, 0.5)
vec <- seq(-2, 4, 0.5)
vec <- vec[3, 17]
vec <- vec[3]
vec <- seq(-2, 4, 0.5)
vec[3] <- 17
date <- date(seq(01.01.2020, 01.12.2020, %m+1), format = "%d.%m.%y")
date <- date(seq(01.01.2020, 01.12.2020, %m), format = "%d.%m.%y")
dateseq <- date(seq(01.01.2020, 01.12.2020, ), format = "%d.%m.%y")
seq(1, 12, 1)
dateseq <- seq(as.Date("01/01/2020"), format = "%d/%m/%Y", by ="month")
dateseq <- seq(as.Date("01/01/2020"), format = "%d/%m/%Y", by = "month", length = 12)
dateseq
dateseq <- seq(as.Date("01/01/2020"), format = "%d/%m/%Y", by = "month", length = 12)
dateseq
print(dateseq)
dateseq2 <- seq(as.Date("01/01/2020"), format = "%d/%m/%Y", by = "month", length = 12)
dateseq2
dateseq2 <- seq(as.Date("01/01/2020"), format = "%d/%m/%Y", by = "month", length.out = 12)
dateseq2
dateseq2 <- seq(as.Date("01/01/2020"), format = "%d/%m/%Y", by = "month", length = 12)
dateseq2
dateseq2 <- seq(as.Date("01/01/2020", format = "%d/%m/%Y"), by = "month", length = 12)
dateseq2
dateseq[3] <- NA
dateseq[5] <- NA
dateseq
dateseq[is.na(dateseq)] <- c(42, 45)
dateseq[is.na(dateseq)] <- c("date1", "date2")
dateseq[is.na(dateseq)] <- c("31/01/2021", "02/02/2022")
dateseq
dateseq <- seq(as.Date("01/01/2020", format = "%d/%m/%Y"), by = "month", length = 12)
dateseq[3] <- NA
dateseq[5] <- NA
dateseq[is.na(dateseq)] <- c("31/01/2021", "02/02/2022")
dateseq
is.na(dateseq)
factor(is.na(dateseq))
length(is.na(dateseq))
dateseq[c(3, 5)] <- NA
factor(is.na(dateseq))
dateseq[is.na(dateseq)] <- c("31/01/2021", "02/02/2022")
factor(is.na(dateseq))
class(dataseq)
class(dateseq)
data(mtcars)
cars <- data(mtcars)
head(cars)
force(mtcars)
cars <- data("mtcars")
cars <- matcars
cars <- data(mtcars)
cars
data(mtcars)
head(mtcars)
str(mtcars)
cars <- mtcars
str(cars)
summary(cars)
cars$am <- factor(c(0, 1))
cars
mtcars
delete(cars)
rm(cars)
cars <- mtcars
columnnames(cars)
colnames(cars)
colnames(cars, drop = FALSE)
cars$am <- as.factor(mtcars$am)
cars
class(cars$am)
cars$am[cars$am == "1"] <- "automatic"
cars$am[cars$am == 1] <- "automatic"
cars
rm(cars)
data(mtcars)
cars <- mtcars
str(cars)
#'data.frame':	32 obs. of  11 variables:
colnames(cars)
#[1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
cars$am <- as.factor(mtcars$am)
cars
cars$am[cars$am == 1] <- as.character("automatic")
cars$am[c(cars$am == 0, cars$am == 1] <- c(as.character("automatic"), as.character("manual"))
cars$am[c(cars$am == 0, cars$am == 1)] <- c(as.character("automatic"), as.character("manual"))
cars
rm(cars)
data(mtcars)
cars <- mtcars
str(cars)
#'data.frame':	32 obs. of  11 variables:
colnames(cars)
#[1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
cars$am <- as.factor(mtcars$am)
cars$am[c(cars$am == 0, cars$am == 1)] <- c(as.character("automatic"), as.character("manual"))
class(cars$am)
cars
rm(cars)
data(mtcars)
cars <- mtcars
str(cars)
#'data.frame':	32 obs. of  11 variables:
colnames(cars)
#[1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
cars$am <- as.factor(mtcars$am)
cars
rm(cars)
data(mtcars)
cars <- mtcars
str(cars)
#'data.frame':	32 obs. of  11 variables:
colnames(cars)
#[1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
class(cars$am)
cars$am <- as.factor(mtcars$am)
class(cars$am)
cars_sub <- subset(cars$cyl < 6 & cars$gear > 3)
cars_sub <- subset(cars, cars$cyl < 6 & cars$gear > 3)
cars_sub
cars$model_name <- rownames()
rnames <- rownames(cars)
cars$model_name <- rnames
cars
rownames(cars) <- c()
cars
cars_new <- cars(c(1, 2, 3, 10, 11, 12, 13, 14), c("model_name", "mpg", "cyl", "wt", "gear"))
cars$am <- as.factor(mtcars$am, labels = c("automatic", "manual"))
cars$am <- as.factor(cars$am, labels = c("automatic", "manual"))
rm(cars)
data(mtcars)
cars <- mtcars
str(cars)
#'data.frame':	32 obs. of  11 variables:
colnames(cars)
#[1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
cars$am <- as.factor(cars$am, labels = c("automatic", "manual"))
class(cars&am)
class(cars$am)
cars_sub <- subset(cars, cars$cyl < 6 & cars$gear > 3, "model_name")
cars$model_name <- rownames(cars)
rownames(cars) <- c() # or NULL
cars_sub <- subset(cars, cars$cyl < 6 & cars$gear > 3, "model_name")
cars_sub
cars_sub <- subset(cars, cars$cyl > 6 & cars$gear > 3, "model_name")
cars_sub
cars_new <- cars[c(1:3, 10:14), c("model_name", "mpg", "cyl", "wt", "gear")]
carS_new
cars_new
cars$am <- as.factor(cars$am, labels = c("automatic", "manual"))
class(cars&am)
cars
rm(cars)
cars <- mtcars
str(cars)
#'data.frame':	32 obs. of  11 variables:
colnames(cars)
#[1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
cars$am <- as.factor(cars$am, labels = c("automatic", "manual"))
class(cars$am)
vec1 <- c(1:3)
vec2 <- c(4:7)
vec3 <- c(7:9)
vec2 <- c(4:6)
mat <- c(vec1, vec2, vec3)
mat
mat <- vec1, vec2, vec3
mat <- (vec1, vec2, vec3)
mat <- matrix(c(vec1, vec2, vec3))
mat
mat <- matrix(vec1, vec2, vec3)
mat <- matrix(vec1, vec2, vec3)
mat <- rbind(vec1, vec2, vec3)
mat
mat <- cbind(vec1, vec2, vec3)
arr <- array(mat, dim = c(nrow(mat), ncol(mat), nrow(mat) * 4))
arr
dim(arr)
m <- matrix(1:6), 2, 3, byrow = T)
m <- matrix(1:6, 2, 3, byrow = T)
n <- matrix(1:6, 2, 3)
m * m
m * n
num_list <- list("Numbers yay",
small = c(1:9),
large = c(10:1000, 50))
num_list
func <- function(day) {}
func <- function(day, code_Working) {
if (code_working == T & day == "Freitag") {
print("Best. Day. Ever. True & True")
}
elif (code_working != T & day == "Freitag") {
func <- function(day, code_Working) {
if (code_working == T & day == "Freitag")
print("Best. Day. Ever. True & True")
elif (code_working != T & day == "Freitag")
print("Naja, immerhin ist Freitag :) False & True")
elif (code_working == T & day != "Freitag")
print("Fast! Wie doof, dass noch nicht Freitag ist. True & False")
elif (code_working != T & day != "Freitag")
print("Hello darkness my old friend... False & False")
}
func(F, "Freitag")
func("Freitag", F)
func <- function(day, code_working) {
if (code_working == T & day == "Freitag")
print("Best. Day. Ever. True & True")
elif (code_working != T & day == "Freitag")
print("Naja, immerhin ist Freitag :) False & True")
elif (code_working == T & day != "Freitag")
print("Fast! Wie doof, dass noch nicht Freitag ist. True & False")
elif (code_working != T & day != "Freitag")
print("Hello darkness my old friend... False & False")
}
func("Freitag", F)
func <- function(day, code_working) {
if (code_working == T & day == "Freitag")
print("Best. Day. Ever. True & True")
else if (code_working != T & day == "Freitag")
print("Naja, immerhin ist Freitag :) False & True")
else if (code_working == T & day != "Freitag")
print("Fast! Wie doof, dass noch nicht Freitag ist. True & False")
else if (code_working != T & day != "Freitag")
print("Hello darkness my old friend... False & False")
}
func("Freitag", F)
save.image("C:/Users/pd281/Downloads/fff22/workspace.RData")
